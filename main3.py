import asyncio
from aiogram import F, Router
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import gtts
from deep_translator import GoogleTranslator
import re
import os
import random
from pathlib import Path

#—Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∞ –Ω–∞–¥–æ —é–∑—ã –∏–ª–∏ –∏–¥ ??????
#–æ—Ç–≤–µ—Ç: —Ñ–∏–≥ –∑–Ω–∞–µ—Ç 
#–∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö
admin_list = ["humans_i_am_not_human"]
#–ª–∞–¥–Ω–æ –ø—É—Å—å –±—É–¥—É—Ç —é–∑–µ—Ä–Ω–µ–π–º—ã

"pattern = r'\b([x—Ö][y—É][—è–π–∏–µ—ë—é]|–ø[–∏—ë]–∑–¥|–±–ª—è)\b' # –∞–Ω—Ç–∏–º–∞—Ç "

pattern = r'(?iu)(?<![–∞-—è—ë])(?:x[—Öx][—Éy\u045e]?[—è–π–∏–µ—ë—é]|–ø[–∏—ñ—ó—ë]*–∑–¥|–±–ª—è(?:[—å—ä]?[—Öx]?)|—Å—É—á–∫[–∞-—è—ë])(?![–∞-—è—ë])'



notmat = ""
roatee = 0
text_to_be_translated = ""

BOT_TOKEN = "7603862674:AAHWuJpvkLaNj6gJL4SMpxsu3zBLRrYvY_I"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

async def sendadmin(text):
    if text.strip() == "":
        await Message.reply("–∫–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—á–∏–∫–∞–º")
        return
    await bot.send_message(chat_id="@humans_i_am_not_human", text=f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Message.from_user.username} —Ö–æ—á–µ—Ç —Å–æ–æ–±—â–∏—Ç—å: {Message.text.strip()}")
        

@dp.message(CommandStart())
async def start_command(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø AvunGus —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç –±–æ—Ç :)")

@dp.message(Command("startt"))
async def startt_command(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç –Ω–∞ aiogram")

@dp.message(Command("info"))
async def info_command(message: Message):
    await message.reply("""
=-=-= –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ =-=-=

–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: 0.4

–∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –±–æ—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /versions
–∞–≤—Ç–æ—Ä: @Sushi_Studios

–Ω–∞—à—ë–ª –±–∞–≥/–ª—è–ø? –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /bug

—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: Python
–ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: aiogram
–ø—Ä–æ–æ–µ–∫—Ç –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–¥ 
–Ω–∞–π—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ @Sushi_Studios

—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /cat 

–∞ –ø–æ–∫–∞ —ç—Ç–æ –≤—Å–µ :)
""")

@dp.message(Command("cat"))
async def cat_command(message: Message):
    await message.reply(Path('–∫–∞—Ç—ã').read_text())

@dp.message(Command("say"))
async def say_command(message: Message):
    match = re.search(pattern,message.text, flags=re.IGNORECASE)
    if match:
        await message.reply("—è —Ç–∞–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É /n –¥–∞–≤–∞–π –±–µ–∑ –º–∞—Ç–æ–≤ ;)")
        return
    text_to_say = message.text[5:].strip() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /say –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    if not text_to_say:
        await message.reply("–ù–∞–ø–∏—à–∏ —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /say –ü—Ä–∏–≤–µ—Ç")
        return

    try:
        tts = gtts.gTTS(text_to_say, lang="ru")
        tts.save("audio.mp3")
        await message.reply_audio(types.FSInputFile("audio.mp3")) # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
    finally:
        if os.path.exists("audio.mp3"): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            os.remove("audio.mp3") # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.remove –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞

@dp.message(Command("rhhfykvguvfhvhi")) # –Ω–µ –æ–∂–∏–¥–∞–Ω–Ω–æ –¥–∞?
async def rhhfykvguvfhvhi_command(message: Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ;)
    if message.from_user.username not in admin_list:
        await message.reply("–ø–ø–≤–ø–Ω–≥–ª—Ä–Ω—à–æ—Ä–≥–æ–∞–±–æ–±–∞–≥–≥7—à–æ–≥–≥–≥–æ–ø—Ç—ã—Ä–æ–Ω–µ–∏—Ä–∞–¥–º–∏–Ω—Ä—Ä–∏") #–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫—Ç–æ –Ω–∏–±—É–¥—å –¥–æ–≥–∞–¥–∞–µ—Ç—Å—è???????
        return
    await message.reply("–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: \n1: /lol –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–º—É —é–∑–µ—Ä—É \n –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –Ω—É –ª–∞–¥–Ω–æ ;)")
    @dp.message(Command("lol"))
    async def lol_command(message: Message):
        if message.text[5:].strip() == "":
            await message.reply("–∫–∞–∂–µ—Ç—Å—è —Ç—ã —Ç—É–ø–æ–π –∏ –Ω–µ —É–∫–∞–∑–∞–ª —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
            return
        # –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞?(—Ç–µ–∫—Å—Ç –∏ —é–∑–µ—Ä–Ω–µ–π–º)
        # –æ—Ç–≤–µ—Ç: –º–æ–∑–≥–∏ –º–æ–∏ –¥—É–º–∞–π—Ç–µ–µ–µ–µ–µ–µ–µ–µ–µ –∞–∞–∞–∞–∞–∞–∞–∞ –∫–∞–∂–µ—Ç—Å—è –º–æ–π –º–æ–∑–≥ –Ω–∞–±–∏—Ä–∞–µ—Ç IQ üë©‚Äçüíªüë©‚Äçüíªüë©‚Äçüíª —è —É–º–Ω–µ—é —É—É—É—É üòÉüòÉüòÉ –º–æ–µ –∏–∫—é —É–∂–µ –±–æ–ª—å—à–µ 0 –∞—Ñ–∏–≥–µ—Ç—å –≤–æ—Ç —ç—Ç–æ —è —É–º–Ω—ã–π üòéüòéüòé –π–∞ –ø—Ä–∏–¥—É–º–∞–ª –≤–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã—Ç–∞–∂–∏—Ç—å 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –∂–æ–ø–∞ —Ç—É—Å—è –Ω–∞ —Ç—É—Å—è –Ω–∞ –ª–∞–¥–Ω–æ —è —É–º–Ω—ã–π üòéüòéüòé
        text_to_send = message.text[4:]
        await message.reply("—Ç–µ—Ä—å –ø—Ä–∏—à–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º")
        @dp.message()
        async def username_to_jopa_command(message: Message):
            username_to_send = message.text
            bot.send_message(username_to_send, text_to_send)
            await message.reply("–æ—Ç–ø—Ä–∞–≤–∏–ª")

#–∫–∞–ø–µ—Ü —É –º–µ–Ω—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 3% üòì
# –±–æ—Ç –æ–≥—Ä–æ–º–Ω—ã–π —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –±–æ—Ç–∞ –ø—É—Å—Ç–∞—è ‚òπÔ∏è
# —è —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä—è–∂–∞—é —É–∂–µ 7% üòéüòéüòé
# 8%

#–Ω–µ –Ω—É —á–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å?
# 9% üòé

async def send_admin_notification(bot: Bot, message: Message, prefix: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º."""
    user = message.from_user.username
    text = message.text.strip()

    if not text:
        await message.reply("‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        return

    await bot.send_message(
        chat_id="7072610695",
        text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} {prefix}: {text}"
    )

@dp.message(Command("newcat"))
async def newcat_command(message: Message):
    args = message.text.split(maxsplit=1)

    if len(args) < 2 or not args[1].strip():
        await message.reply("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ –∏–º—è –∫–æ—Ç–∏–∫–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ ASCII-–∞—Ä—Ç!")
        return

    await message.reply("‚úÖ –¢–≤–æ–π –∫–æ—Ç–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!")

    # –†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (1% —à–∞–Ω—Å)
    if random.randint(1, 100) == 62:
        achievement_msg = [
            "üê± –ú—è—É?",
            "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª —Ä–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ú—è—É-—É–¥–∞—á–∞¬ª!",
            "üåü –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å —à–∞–Ω—Å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ @Sushi_Studios!"
        ]
        for msg in achievement_msg:
            await message.reply(msg)

        await send_admin_notification(
            bot, message, 
                "{user}–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ú—è—É!¬ª –∏ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ –∞–¥–º–∏–Ω–∫—É"
        )

    await send_admin_notification(bot, message, "—Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ç–∏–∫–∞")

@dp.message(Command("bug"))
async def bug_report_command(message: Message):
    if not message.text.replace('/bug', '').strip():
        await message.reply("üìù –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /bug")
        return

    await send_admin_notification(bot, message, "—Å–æ–æ–±—â–∏–ª –æ –±–∞–≥–µ")
    await message.reply("üõ† –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á–µ—Ç! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∏—Å—Å–ª–µ–¥—É—é—Ç –ø—Ä–æ–±–ª–µ–º—É.")

    
@dp.message(Command("versions"))
async def versions_command(message: Message):
    await message.reply(Path('–≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞.txt').read_text())

@dp.message(Command("roate"))
async def roate_command(message: Message):
    global roatee
    if roatee == 0:
        await message.reply("–†–µ–∂–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω")
        roatee = 1
    else:
        await message.reply("–†–µ–∂–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å–ª–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω")
        roatee = 0
translatelang = ""

""""router = Router()

# –°–ª–æ–≤–∞—Ä—å —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
LANGUAGES = {
    "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
    "—Ä—É—Å—Å–∫–∏–π": "ru",
    "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "be",
    "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "uk",
    "–Ω–µ–º–µ—Ü–∫–∏–π": "de",
    "–∫–∏—Ç–∞–π—Å–∫–∏–π": "zh",
    "—è–ø–æ–Ω—Å–∫–∏–π": "ja"
}

@router.message(Command("translite"))
async def translite_command(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text_to_translate = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None

    if not text_to_translate:
        await message.reply("‚ùó –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /translite –ü—Ä–∏–≤–µ—Ç")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    for lang_name, lang_code in LANGUAGES.items():
        builder.button(text=lang_name, callback_data=f"lang_{lang_code}_{text_to_translate}")

    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
    await message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("lang_"))
async def handle_translation(callback: CallbackQuery):
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
    _, lang_code, text_to_translate = callback.data.split("_", 2)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    try:
        translated = GoogleTranslator(source='auto', target=lang_code).translate(text_to_translate)
        await callback.message.edit_text(f"üî§ –ü–µ—Ä–µ–≤–æ–¥: {translated}")
    except Exception as e:
        await callback.message.edit_text(f"‚ö† –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")

    await callback.answer()"""

router = Router()  # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ:
# dp.include_router(router)

LANGUAGES = {
    "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
    "—Ä—É—Å—Å–∫–∏–π": "ru",
    "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "be",
    "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "uk",
    "–Ω–µ–º–µ—Ü–∫–∏–π": "de",
    "–∫–∏—Ç–∞–π—Å–∫–∏–π": "zh",
    "—è–ø–æ–Ω—Å–∫–∏–π": "ja"
}

@dp.message(Command("translator"))  # –§–∏–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —É—á—ë—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def translite_command(message: Message):
    text_parts = message.text.split(maxsplit=1)

    if len(text_parts) < 2:
        await message.reply("‚ùó –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /translite –ü—Ä–∏–≤–µ—Ç")
        return

    text_to_translate = text_parts[1]

    builder = InlineKeyboardBuilder()
    for lang_name, lang_code in LANGUAGES.items():
        builder.button(
            text=lang_name, 
            callback_data=f"lang_{lang_code}_{text_to_translate}"
        )

    builder.adjust(2)
    await message.answer("üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("lang_"))
async def handle_translation(callback: CallbackQuery):
    try:
        _, lang_code, text = callback.data.split("_", 2)
        translated = GoogleTranslator(source='auto', target=lang_code).translate(text)
        await callback.message.edit_text(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥: {translated}")
    except Exception as e:
        await callback.message.edit_text(f"‚ö† –û—à–∏–±–∫–∞: {e}")
    finally:
        await callback.answer()

    
@dp.message()
async def reverse_text(message: Message):
    match = re.search(pattern,message.text, flags=re.IGNORECASE)
    if match:
        await message.reply("–≠—ç—ç –ø–æ–ª–µ–≥—á–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç—ã \n –û–∫? :)")
        return
    """if message.chats.type == ChatType.PRIVATE:
        print("–∑–∞–≥–ª—É—à–∫–∞") # —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏ –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–Ω—Ç –ª–æ–ª
    elif message.chats.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.text[1] != "/":
            return"""
    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/" —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∏–Ω–∞—á–µ –æ—Å–ª–∞–≤–Ω–æ–π –∫–æ–¥
    if roatee == 1:
        await message.reply(message.text[::-1])
    else:
        await message.reply(message.text)


async def main():
   await dp.start_polling(bot)

if __name__ == "__main__":
    print("amongus")
    asyncio.run(main())
