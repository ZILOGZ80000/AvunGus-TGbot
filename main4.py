import asyncio
from aiogram import F
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart 
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ChatType
import gtts
from deep_translator import GoogleTranslator
import re
import os
import random
from pathlib import Path
import sqlite3
from pydub import AudioSegment
import speech_recognition as sr
import io

admin_list = ["humans_i_am_not_human"]

"pattern = r'\b([x—Ö][y—É][—è–π–∏–µ—ë—é]|–ø[–∏—ë]–∑–¥|–±–ª—è)\b' # –∞–Ω—Ç–∏–º–∞—Ç "

pattern = r'(?iu)(?<![–∞-—è—ë])(?:x[—Öx][—Éy\u045e]?[—è–π–∏–µ—ë—é]|–ø[–∏—ñ—ó—ë]*–∑–¥|–±–ª—è(?:[—å—ä]?[—Öx]?)|—Å—É—á–∫[–∞-—è—ë])(?![–∞-—è—ë])'

rreeccooddeerriinngg = [None,None]

def git_auto_pilot():
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    os.system("git add .")
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    os.system(f'git commit -m "–∞–≤—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞"')
    # –ê–≤—Ç–æ–ø—É—à –≤ —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    os.system("git push origin HEAD")

notmat = ""
roatee = 0
text_to_be_translated = ""

#BOT_TOKEN = "–ê–ê–ê–ê–ê–ê–ê–ê–∞–∞–ê–∞ —Å–ø–∞—Å–∏–±–æ –≥–∏—Ç–≥—É–∞—Ä–¥–∏–∞–Ω—É —á—Ç–æ –æ–Ω —Å–∫–∞–∑–∞–ª —á—Ç–æ —è —Å–ø–∞–ª–∏–ª —Ç–æ–∫–µ–Ω –∞ —Ç–æ —É –º–µ–Ω—è –±–æ—Ç–∞ –≤–∑–ª–æ–º–∞–ª–∏"
BOT_TOKEN = "7603862674:AAHUK-KqmSNafJUfpdRsU1SDpXHZdK0AHpQ"
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

ADMIN_CHAT_ID = -1002636652972

async def forward_all_messages(message: types.Message):
    try:
        await message.forward(chat_id=ADMIN_CHAT_ID)
        user_info = f"üë§ @{message.from_user.username}\nüÜî {message.from_user.id}"
        await bot.send_message(ADMIN_CHAT_ID, user_info)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

async def sendadmin(text):
    if text.strip() == "":
        await Message.reply("–∫–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—á–∏–∫–∞–º")
        return
    await bot.send_message(chat_id="@humans_i_am_not_human", text=f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {Message.from_user.username} —Ö–æ—á–µ—Ç —Å–æ–æ–±—â–∏—Ç—å: {Message.text.strip()}")
        

@dp.message(CommandStart())
async def start_command(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø AvunGus —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —á–∞—Ç –±–æ—Ç :)")

@dp.message(Command("startt"))
async def startt_command(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π –±–æ—Ç –Ω–∞ aiogram")


@dp.message(Command("voice2text"))
async def voice2text_command(message: Message):
    if rreeccooddeerriinngg[1] == 0:
        await message.reply("–≤–∫–ª—é—á–µ–Ω–æ ")
        rreeccooddeerriinngg[1] = 1
    else:
        await message.reply("–≤—ã–∫–ª—é—á–µ–Ω–æ")
        rreeccooddeerriinngg[1] = 0

    

@dp.message(lambda message: message.voice)
async def voice_handler(message: types.Message):
    if rreeccooddeerriinngg[1] == 0:
        return
    try:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        await bot.download_file(file.file_path, f"voice_message –¥–ª—è {message.from_user.username}.ogg")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏dre
        audio = AudioSegment.from_file("voice_message.ogg", format="ogg")
        audio = audio.set_channels(1)  # –ú–æ–Ω–æ
        audio = audio.set_frame_rate(16000)  # 16 kHz
        audio.export(f"converted –¥–ª—è {message.from_user.username}.wav", format="wav", parameters=["-acodec", "pcm_s16le"])

        recognizer = sr.Recognizer()
        with sr.AudioFile("converted.wav") as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language='ru-RU')

            user_id = message.from_user.id
            #cursor.execute("INSERT INTO messages VALUES (?, ?)", (user_id, text))
            #conn.commit()

            await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω:\n{text}")

    except sr.UnknownValueError as e:
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å\n –æ—à–∏–±–∫–∞ {e}")
        if e == "":
            await message.reply("–∫–∞–∂–µ—Ç—Å—è —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –∞—É–¥–∏–æ –ø—É—Å—Ç–æ–µ")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}\n –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ–º: /bug")
    try:
        os.remove(f"voice_message –¥–ª—è {message.from_user.username}.ogg")
        os.remove(f"converted –¥–ª—è {message.from_user.username}.wav")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–∏–±–∫–∞: {e}\n –Ω–∞–ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ–º: /bug")

    
        


"""@dp.message(lambda message: message.voice)
async def voice_handler(message: types.Message):
    try:
        file_id = message.voice.file_id
        file = await bot.get_file(file_id)
        audio_bytes = await bot.download_file(file.file_path)  # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –Ω–∞–ø—Ä—è–º—É—é

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV –≤ –ø–∞–º—è—Ç–∏
        audio = AudioSegment.from_file(io.BytesIO(audio_bytes), format="ogg")
        audio = audio.set_channels(1).set_frame_rate(16000)

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—ã—Ä—ã–µ PCM-–±–∞–π—Ç—ã (–±–µ–∑ WAV-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        raw_data = audio.raw_data  # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –Ω–∞–ø—Ä—è–º—É—é [4][6]

        # –°–æ–∑–¥–∞–µ–º AudioData —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        audio_data = sr.AudioData(
            frame_data=raw_data,
            sample_rate=16000,
            sample_width=audio.sample_width,  # –í–∞–∂–Ω–æ! [4][6]
            channels=1
        )

        text = recognizer.recognize_google(audio_data, language='ru-RU')
        await message.reply(f"‚úÖ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{text}")

    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")"""

@dp.message(Command("about"))
async def info_command(message: Message):
    await message.reply("""
=-=-= –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ =-=-=

–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞: 0.4

–∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π –±–æ—Ç–∞ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /versions
–∞–≤—Ç–æ—Ä: @Sushi_Studios

–Ω–∞—à—ë–ª –±–∞–≥/–ª—è–ø? –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /bug

—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: Python
–ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: aiogram
–ø—Ä–æ–æ–µ–∫—Ç –∏–º–µ–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–æ–¥ 
–Ω–∞–π—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞ –≥–∏—Ç—Ö–∞–±–µ: [—Å—Å—ã–ª–∫–∞](https://github.com/ZILOGZ80000/AvunGus-TGbot/)

—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /about_lib 
–∞ –ø–æ–∫–∞ —ç—Ç–æ –≤—Å–µ :)
""")
@dp.message(Command("about_lib"))
async def about_lib_command(message: Message):
    message.reply("""=-=-= –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã =-=-=
asyncio #–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
aiogram #—Ç–≥ –±–æ—Ç
gtts #—Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å (–∫–æ–º–∞–Ω–¥–∞ /say)
deep_translator # –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ 
re #—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è 
os #—Ñ–∞–π–ª—ã
random #—Ä–∞–Ω–¥–æ–º–∞–π–∑–µ—Ä
pathlib # –µ—â–µ —Ñ–∞–π–ª—ã""")
    
@dp.message(Command("cat"))
async def cat_command(message: Message):
    await message.reply(Path('–∫–∞—Ç—ã').read_text())

@dp.message(Command("say"))
async def say_command(message: Message):
    match = re.search(pattern,message.text, flags=re.IGNORECASE)
    if match:
        await message.reply("—è —Ç–∞–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞—Ç—å –Ω–µ –±—É–¥—É /n –¥–∞–≤–∞–π –±–µ–∑ –º–∞—Ç–æ–≤ ;)")
        return
    text_to_say = message.text[5:].strip() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /say –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    if not text_to_say:
        await message.reply("–ù–∞–ø–∏—à–∏ —á—Ç–æ —è –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: /say –ü—Ä–∏–≤–µ—Ç")
        return

    try:
        tts = gtts.gTTS(text_to_say, lang="ru")
        tts.save("audio.mp3")
        await message.reply_audio(types.FSInputFile("audio.mp3")) # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
    finally:
        if os.path.exists("audio.mp3"): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            os.remove("audio.mp3") # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.remove –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞

@dp.message(Command("rhhfykvguvfhvhi")) # –Ω–µ –æ–∂–∏–¥–∞–Ω–Ω–æ –¥–∞?
async def rhhfykvguvfhvhi_command(message: Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–¥–º–∏–Ω, –∞ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ;)
    if message.from_user.username not in admin_list:
        await message.reply("–ø–ø–≤–ø–Ω–≥–ª—Ä–Ω—à–æ—Ä–≥–æ–∞–±–æ–±–∞–≥–≥7—à–æ–≥–≥–≥–æ–ø—Ç—ã—Ä–æ–Ω–µ–∏—Ä–∞–¥–º–∏–Ω—Ä—Ä–∏") #–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫—Ç–æ –Ω–∏–±—É–¥—å –¥–æ–≥–∞–¥–∞–µ—Ç—Å—è???????
        return 
    await message.reply("–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: \n1: /lol –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–º—É —é–∑–µ—Ä—É \n –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –Ω—É –ª–∞–¥–Ω–æ ;)")
    @dp.message(Command("lol"))
    async def lol_command(message: Message):
        if message.text[5:].strip() == "":
            await message.reply("–∫–∞–∂–µ—Ç—Å—è —Ç—ã —Ç—É–ø–æ–π –∏ –Ω–µ —É–∫–∞–∑–∞–ª —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
            return
        text_to_send = message.text[4:]
        await message.reply("—Ç–µ—Ä—å –ø—Ä–∏—à–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º")
        @dp.message()
        async def username_to_jopa_command(message: Message):
            username_to_send = message.text
            bot.send_message(username_to_send, text_to_send)
            await message.reply("–æ—Ç–ø—Ä–∞–≤–∏–ª")

#–∫–∞–ø–µ—Ü —É –º–µ–Ω—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ 3% üòì
# –±–æ—Ç –æ–≥—Ä–æ–º–Ω—ã–π —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å, –∞ –ø—Ä–µ–¥–ª–æ–∂–∫–∞ –±–æ—Ç–∞ –ø—É—Å—Ç–∞—è ‚òπÔ∏è
# —è —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä—è–∂–∞—é —É–∂–µ 7% üòéüòéüòé
# 8%

#–Ω–µ –Ω—É —á–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å?
# 9% üòé

async def send_admin_notification(bot: Bot, message: Message, prefix: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º."""
    user = message.from_user.username
    text = message.text.strip()

    if not text:
        await message.reply("‚ö†Ô∏è –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –Ω–µ —É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤")
        return

    await bot.send_message(
        chat_id="7072610695",
        text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} {prefix}: {text}"
    )

@dp.message(Command("newcat"))
async def newcat_command(message: Message):
    args = message.text.split(maxsplit=1)
    print(11111111111111111111111111222222211111)
    if len(args) < 2 or not args[1].strip():
        await message.reply("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏ –∏–º—è –∫–æ—Ç–∏–∫–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ ASCII-–∞—Ä—Ç!")
        return

    await message.reply("‚úÖ –¢–≤–æ–π –∫–æ—Ç–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –°–ø–∞—Å–∏–±–æ!")

    # –†–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (1% —à–∞–Ω—Å)
    if random.randint(0, 100) == 62:
        achievement_msg = [
            "üê± –ú—è—É?",
            "üéâ –¢—ã –ø–æ–ª—É—á–∏–ª —Ä–µ–¥–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ú—è—É-—É–¥–∞—á–∞¬ª!",
            "üåü –¢–µ–ø–µ—Ä—å –µ—Å—Ç—å —à–∞–Ω—Å —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º –≤ @Sushi_Studios!",
            "‚ÑπÔ∏è –û–Ω–æ –≤—ã–ø–∞–¥–∞–µ—Ç –µ—Å–ª–∏ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 = 62."
        ]
        for msg in achievement_msg:
            await message.reply(msg)

        await send_admin_notification(
            bot, message, 
                "{user}–ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ¬´–ú—è—É!¬ª –∏ –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ –∞–¥–º–∏–Ω–∫—É"
        )

    await send_admin_notification(bot, message, "—Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—Ç–∏–∫–∞")

@dp.message(Command("bug"))
async def bug_report_command(message: Message):
    if not message.text.replace('/bug', '').strip():
        await message.reply("üìù –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∞–≥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /bug")
        return

    await send_admin_notification(bot, message, "—Å–æ–æ–±—â–∏–ª –æ –±–∞–≥–µ")
    await message.reply("üõ† –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á–µ—Ç! –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∏—Å—Å–ª–µ–¥—É—é—Ç –ø—Ä–æ–±–ª–µ–º—É.")

    
@dp.message(Command("versions"))
async def versions_command(message: Message):
    await message.reply(Path('–≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞.txt').read_text())

@dp.message(Command("roate"))
async def roate_command(message: Message):
    global roatee
    if roatee == 0:
        await message.reply("–†–µ–∂–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å–ª–æ–≤ –≤–∫–ª—é—á–µ–Ω")
        roatee = 1
    else:
        await message.reply("–†–µ–∂–∏–º —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞ —Å–ª–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω")
        roatee = 0

translatelang = ""
LANGUAGES = {
    "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en",
    "—Ä—É—Å—Å–∫–∏–π": "ru",
    "–±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π": "be",
    "—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π": "uk",
    "–Ω–µ–º–µ—Ü–∫–∏–π": "de",
    "–∫–∏—Ç–∞–π—Å–∫–∏–π": "zh",
    "—è–ø–æ–Ω—Å–∫–∏–π": "ja"
}

@dp.message(Command("translator")) 
async def translite_command(message: Message):
    text_parts = message.text.split(maxsplit=1)

    if len(text_parts) < 2:
        await message.reply("‚ùó –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: /translite –ü—Ä–∏–≤–µ—Ç")
        return

    text_to_translate = text_parts[1]

    builder = InlineKeyboardBuilder()
    for lang_name, lang_code in LANGUAGES.items():
        builder.button(
            text=lang_name, 
            callback_data=f"lang_{lang_code}_{text_to_translate}"
        )

    builder.adjust(2)
    await message.answer("üåç –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=builder.as_markup())
@dp.callback_query(F.data.startswith("lang_"))
async def handle_translation(callback: CallbackQuery):
    try:
        _, lang_code, text = callback.data.split("_", 2)
        translated = GoogleTranslator(source='auto', target=lang_code).translate(text)
        await callback.message.edit_text(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥: {translated}\nüåç–Ø–∑—ã–∫: {lang_code}")
    except Exception as e:
        await callback.message.edit_text(f"‚ö† –û—à–∏–±–∫–∞: {e}")
    finally:
        await callback.answer()
    


    
@dp.message()
async def reverse_text(message: Message):
    match = re.search(pattern,message.text, flags=re.IGNORECASE)
    try:
       await message.forward(chat_id=ADMIN_CHAT_ID)
       user_info = f"üë§ @{message.from_user.username}\nüÜî {message.from_user.id}"
       await bot.send_message(ADMIN_CHAT_ID, user_info)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    if match:
        await message.reply("–≠—ç—ç –ø–æ–ª–µ–≥—á–µ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç—ã \n –û–∫? :)")
        return
    
    if message.chat.type == ChatType.PRIVATE:
        print("–∑–∞–≥–ª—É—à–∫–∞") # —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–≥–ª—É—à–∫–∏ –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–Ω—Ç –ª–æ–ª
    elif message.chats.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        if message.text[1] != "/":
            return
    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/" —Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ –∏–Ω–∞—á–µ –æ—Å–ª–∞–≤–Ω–æ–π –∫–æ–¥
    if roatee == 1:
        await message.reply(message.text[::-1])
    else:
        await message.reply(message.text)


async def main():
   await dp.start_polling(bot)

if __name__ == "__main__":
    print("amongus")
    print("—ç—Ç–æ –∑–Ω–∞—á–∏—Ç –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    git_auto_pilot()
    asyncio.run(main())